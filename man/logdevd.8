.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LOGDEVD 8"
.TH LOGDEVD 8 "2016-03-21" "" "Linux System Administration"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
logdevourer \- log parsing daemon
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBlogdevd\fR [ \fB\-\-daemon\fR ] [ \fB\-\-config\fR=\fIconfig-file\fR ]
[ \fB\-\-state\-dir\fR=\fIstate-dir\fR ]
[ \fB\-\-pid\-file\fR=\fIpidfile\fR ]
\&\fIoptions\fR\ ...
.PP
\&\fBlogdevd\fR \fB\-\-stdio\fR [ \fB\-\-config\fR=\fIconfig-file\fR ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIlogdevourer\fR is a daemon that follows specified set of log files and log
sockets (\fItcp\fR\|(7), \fIudp\fR\|(7), or \fIunix\fR\|(7)), parses incoming entries into
JSON-compatible structure, and sends them to the configured outputs (typically
a locally running spooler, like Fluentd or \fImessenger\fR\|(8) from Seismometer
Toolbox).
.PP
Considering \fIrsyslogd\fR\|(8) alone, \fIlogdevourer\fR could be seen as excessive
daemon, as \fIrsyslogd\fR\|(8) already can work with \fIliblognorm\fR. On the other
hand, \fIlogdevourer\fR can also read logs produced outside syslog, and parsed
logs can be sent through the same channel as monitoring data, which allows
to derive additional metrics based on logs. \fIlogdevourer\fR has also simpler
output protocol and configuration, so it can be easily incorporated into
bigger infrastructure.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-c\fR \fIconfig-file\fR, \fB\-\-config\fR=\fIconfig-file\fR" 4
.IX Item "-c config-file, --config=config-file"
configuration file, which specifies log sources, log destinations, path to
rules base, and other options (default: \fI/etc/logdevourer/logdevourer.conf\fR)
.IP "\fB\-l\fR \fIlogging-config\fR, \fB\-\-logging\fR=\fIlogging-config\fR" 4
.IX Item "-l logging-config, --logging=logging-config"
YAML-encoded logging configuration dictionary for Python; see
<https://docs.python.org/2/howto/logging.html> and
\&\f(CW\*(C`logging.config.dictConfig()\*(C'\fR Python function documentation for details
.Sp
\&\fB\s-1NOTE\s0\fR: on Python 2.6 \fIlogdevourer\fR uses backported \f(CW\*(C`dictConfig()\*(C'\fR, so it
works the same as on Python 2.7
.IP "\fB\-i\fR, \fB\-\-stdio\fR" 4
.IX Item "-i, --stdio"
ignore sources and destinations configuration, reading logs from \fI\s-1STDIN\s0\fR and
writing parse results to \fI\s-1STDOUT\s0\fR instead (this mode is mainly useful for
developing parsing rules); logging is disabled in this mode, unless
\&\fB\-\-logging\fR option was provided
.IP "\fB\-d\fR, \fB\-\-daemon\fR" 4
.IX Item "-d, --daemon"
run in background, detaching from terminal
.IP "\fB\-s\fR \fIstate-dir\fR, \fB\-\-state\-dir\fR=\fIstate-dir\fR" 4
.IX Item "-s state-dir, --state-dir=state-dir"
state directory, used to save positions for log files (default:
\&\fI/var/lib/logdevourer/\fR)
.IP "\fB\-p\fR \fIpidfile\fR, \fB\-\-pid\-file\fR=\fIpidfile\fR" 4
.IX Item "-p pidfile, --pid-file=pidfile"
file to write \s-1PID\s0 to (mainly useful for \f(CW\*(C`\-\-daemon\*(C'\fR option)
.IP "\fB\-u\fR \fIuser\fR, \fB\-\-user\fR=\fIuser\fR, \fB\-g\fR \fIgroup\fR, \fB\-\-group\fR=\fIgroup\fR" 4
.IX Item "-u user, --user=user, -g group, --group=group"
change \s-1UID\s0 and \s-1GID\s0 to these (default: no \s-1UID/GID\s0 change)
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Configuration file is a \s-1YAML\s0 with three sections, \f(CW\*(C`sources\*(C'\fR list,
\&\f(CW\*(C`destinations\*(C'\fR list, and \f(CW\*(C`options\*(C'\fR hash.
.PP
An example config could look like this:
.PP
.Vb 9
\&  sources:
\&    \- /var/log/auth.log
\&    \- /var/log/daemon.log
\&    \- /var/log/kern.log
\&    \- /var/log/messages
\&    \- /var/log/syslog
\&    \- /var/log/user.log
\&    \- {proto: udp, host: localhost, port: 9830}
\&    \- {proto: unix, path: /var/run/logdevourer.sock}
\&
\&  destinations:
\&    \- {proto: unix, path: /var/run/messenger.sock, retry: true}
\&
\&  options:
\&    rulebase: /etc/logdevourer/syslog.rules
\&    send_unparsed: true
\&    log_unparsed: false
.Ve
.SS "Log Sources"
.IX Subsection "Log Sources"
Log source can be a string, meaning it's a path to a log file (typically
a syslog file, but it could be Apache's or nginx' log, for example). This file
is then followed in a similar manner to how \f(CW\*(C`tail\ \-f\ ...\*(C'\fR works.
\&\fIlogdevourer\fR recognizes when the file was truncated, removed, or replaced
with a fresh file (like \fIlogrotate\fR\|(8) with different mixes of
\&\fIcopytruncate\fR and \fIcreate\fR options works). If the log file doesn't exist at
the start time, \fIlogdevourer\fR will start watching it as soon as it becomes
available.
.PP
Log source can also be a hash with one of the following structures:
.ie n .IP """{""proto"": ""stdin""}""" 4
.el .IP "\f(CW{``proto'': ``stdin''}\fR" 4
.IX Item "{""proto"": ""stdin""}"
read logs from \fI\s-1STDIN\s0\fR
.ie n .IP """{""proto"": ""unix"", ""path"": \f(CIsocket path\f(CW}""" 4
.el .IP "\f(CW{``proto'': ``unix'', ``path'': \f(CIsocket path\f(CW}\fR" 4
.IX Item "{""proto"": ""unix"", ""path"": socket path}"
receive logs on a datagram unix socket, one log entry per message (message may
end with newline character, but doesn't need to)
.ie n .IP """{""proto"": ""tcp"", ""port"": \f(CIinteger\f(CW}""" 4
.el .IP "\f(CW{``proto'': ``tcp'', ``port'': \f(CIinteger\f(CW}\fR" 4
.IX Item "{""proto"": ""tcp"", ""port"": integer}"
.PD 0
.ie n .IP """{""proto"": ""tcp"", ""host"": \f(CIbind address\f(CW, ""port"": \f(CIinteger\f(CW}""" 4
.el .IP "\f(CW{``proto'': ``tcp'', ``host'': \f(CIbind address\f(CW, ``port'': \f(CIinteger\f(CW}\fR" 4
.IX Item "{""proto"": ""tcp"", ""host"": bind address, ""port"": integer}"
.PD
receive logs on a \s-1TCP\s0 socket (\fIbind address\fR may be a \s-1DNS\s0 name or \s-1IP\s0
address)
.ie n .IP """{""proto"": ""udp"", ""port"": \f(CIinteger\f(CW}""" 4
.el .IP "\f(CW{``proto'': ``udp'', ``port'': \f(CIinteger\f(CW}\fR" 4
.IX Item "{""proto"": ""udp"", ""port"": integer}"
.PD 0
.ie n .IP """{""proto"": ""udp"", ""host"": \f(CIbind address\f(CW, ""port"": \f(CIinteger\f(CW}""" 4
.el .IP "\f(CW{``proto'': ``udp'', ``host'': \f(CIbind address\f(CW, ``port'': \f(CIinteger\f(CW}\fR" 4
.IX Item "{""proto"": ""udp"", ""host"": bind address, ""port"": integer}"
.PD
receive logs on an \s-1UDP\s0 socket (\fIbind address\fR may be a \s-1DNS\s0 name or \s-1IP\s0
address)
.SS "Log Destinations"
.IX Subsection "Log Destinations"
Since \fIlogdevourer\fR's main purpose is to follow log files, its network output
is not a sophisticated one. If some sort of data spooling and/or retransmition
is required (and pretty much always is), some other daemon running along with
\&\fIlogdevourer\fR is necessary.
.PP
This other daemon's location can be pointed in following ways:
.ie n .IP """stdout"" or ""{""proto"": ""stdout""}""" 4
.el .IP "\f(CW``stdout''\fR or \f(CW{``proto'': ``stdout''}\fR" 4
.IX Item """stdout"" or {""proto"": ""stdout""}"
write parse results to \fI\s-1STDOUT\s0\fR
.ie n .IP """{""proto"": ""unix"", ""path"": \f(CIsocket path\f(CW}""" 4
.el .IP "\f(CW{``proto'': ``unix'', ``path'': \f(CIsocket path\f(CW}\fR" 4
.IX Item "{""proto"": ""unix"", ""path"": socket path}"
.PD 0
.ie n .IP """{""proto"": ""unix"", ""path"": \f(CIsocket path\f(CW, ""retry"": true}""" 4
.el .IP "\f(CW{``proto'': ``unix'', ``path'': \f(CIsocket path\f(CW, ``retry'': true}\fR" 4
.IX Item "{""proto"": ""unix"", ""path"": socket path, ""retry"": true}"
.ie n .IP """{""proto"": ""unix"", ""path"": \f(CIsocket path\f(CW, ""retry"": false}""" 4
.el .IP "\f(CW{``proto'': ``unix'', ``path'': \f(CIsocket path\f(CW, ``retry'': false}\fR" 4
.IX Item "{""proto"": ""unix"", ""path"": socket path, ""retry"": false}"
.PD
send parse results to datagram unix socket; first two forms cause
\&\fIlogdevourer\fR to hold whole parsing in case of a send error (e.g. the
process on the receiving end of the socket was restarted), while the last form
causes the messages to be simply dropped
.ie n .IP """{""proto"": ""tcp"", ""host"": \f(CIaddress\f(CW, ""port"": \f(CIaddress\f(CW}""" 4
.el .IP "\f(CW{``proto'': ``tcp'', ``host'': \f(CIaddress\f(CW, ``port'': \f(CIaddress\f(CW}\fR" 4
.IX Item "{""proto"": ""tcp"", ""host"": address, ""port"": address}"
send parse results to \s-1TCP\s0 socket, holding the whole parsing in case of network
problems
.ie n .IP """{""proto"": ""udp"", ""host"": \f(CIaddress\f(CW, ""port"": \f(CIaddress\f(CW}""" 4
.el .IP "\f(CW{``proto'': ``udp'', ``host'': \f(CIaddress\f(CW, ``port'': \f(CIaddress\f(CW}\fR" 4
.IX Item "{""proto"": ""udp"", ""host"": address, ""port"": address}"
send parse results to \s-1UDP\s0 socket, ignoring any network errors
.PP
\&\fI\s-1STDOUT\s0\fR and \fI\s-1TCP\s0\fR outputs write \s-1JSON\s0 objects, one per line. \fI\s-1UDP\s0\fR and
\&\fIunix\fR outputs send a \s-1JSON\s0 object per message, and messages \fBdo not end\fR
with a newline character.
.SS "Options"
.IX Subsection "Options"
.ie n .IP """rulebase"" (path)" 4
.el .IP "\f(CWrulebase\fR (path)" 4
.IX Item "rulebase (path)"
path to the \fIliblognorm\fR rules file; see \*(L"\s-1RULES\s0 \s-1PRIMER\s0\*(R"
.ie n .IP """send_unparsed"" (boolean, default ""true"")" 4
.el .IP "\f(CWsend_unparsed\fR (boolean, default \f(CWtrue\fR)" 4
.IX Item "send_unparsed (boolean, default true)"
whether to send or suppress messages in case of parse failure (i.e.
unrecognized message format); see \*(L"\s-1OUTPUT\s0 \s-1FORMAT\s0\*(R"
.ie n .IP """log_unparsed"" (boolean, default ""false"")" 4
.el .IP "\f(CWlog_unparsed\fR (boolean, default \f(CWfalse\fR)" 4
.IX Item "log_unparsed (boolean, default false)"
whether to log parse failures
.SH "OUTPUT FORMAT"
.IX Header "OUTPUT FORMAT"
There are two kinds of output messages. One is when parsing succeeds, and all
the log fields are gathered in a message. Such message looks like:
.PP
.Vb 2
\&  {"event.tags": ["tag1", "tag2", ...],
\&    "date": "Mar 18 14:17:33", "host": "onyx", ...}
.Ve
.PP
\&\f(CW"event.tags"\fR is a special key that carries list of tags the rule has
specified. The key is missing if the rule has no tags. The rest of the keys
are the named matches from the matching rule.
.PP
If no rule matched, a message with two keys, \f(CW"originalmsg"\fR and
\&\f(CW"unparsed\-data"\fR, is generated. \f(CW"originalmsg"\fR contains the whole log
entry, and \f(CW"unparsed\-data"\fR contains only the part that \fIliblognorm\fR
couldn't parse. Example message looks like this:
.PP
.Vb 2
\&  {"originalmsg": "Mar 18 14:17:33 onyx daemon[7721]: some event",
\&    "unparsed\-data": "some event"}
.Ve
.PP
Of course messages of this type are suppressed when \f(CW"send_unparsed"\fR in
configuration is set to \f(CW\*(C`false\*(C'\fR.
.SH "RULES PRIMER"
.IX Header "RULES PRIMER"
This guide is by no means exhaustive. It's just to provide most of the
information related to \fIlogdevourer\fR in one place. For full syntax
description and complete list of available fields see \fIliblognorm\fR's
manual.
.SS "Syntax"
.IX Subsection "Syntax"
A rule line starts with \f(CW"rule="\fR, followed by (possibly empty) list of tags,
separated from the rule itself with a colon \f(CW":"\fR.
.PP
.Vb 3
\&  # comments start with a hash sign
\&  rule=tag1, tag2, ...:literal text
\&  rule=:literal text, no tags
.Ve
.PP
Note the leading colon in the second rule.
.PP
If necessary, characters can be specified in \f(CW"\ex##"\fR form, \f(CW"##"\fR being
a two-digit hexadecimal character code. Useful values are:
.ie n .IP """\ex3a"" == "":""" 4
.el .IP "\f(CW``\ex3a''\fR == \f(CW``:''\fR" 4
.IX Item """x3a"" == "":"""
.PD 0
.ie n .IP """\ex25"" == ""%""" 4
.el .IP "\f(CW``\ex25''\fR == \f(CW``%''\fR" 4
.IX Item """x25"" == ""%"""
.ie n .IP """\ex20"" == "" """ 4
.el .IP "\f(CW``\ex20''\fR == \f(CW`` ''\fR" 4
.IX Item """x20"" == "" """
.ie n .IP """\ex2c"" == "",""" 4
.el .IP "\f(CW``\ex2c''\fR == \f(CW``,''\fR" 4
.IX Item """x2c"" == "","""
.PD
.PP
A literal percent sign \f(CW"%"\fR can also be encoded as \f(CW"%%"\fR where it makes
sense.
.PP
Variable parts of the message are denoted with \f(CW"%field_name:format%"\fR or
\&\f(CW"%field_name:format:args%"\fR placeholders. Several possible formats can be
found in \*(L"Field Types\*(R" section, with full list in \fIliblognorm\fR's manual.
.PP
.Vb 4
\&  prefix=%date:date\-rfc3164% %host:word%\ex20
\&  # ...
\&  rule=dhcp_discover:dhcpd: DHCPDISCOVER from %mac:word% via %iface:word%
\&  rule=dhcp_discover:dhcpd: DHCPDISCOVER from %mac:word% via %iface:char\-to:\ex3a%: %message:rest%
.Ve
.PP
If the format is important, but the actual value is to be ignored, field name
can be set to \f(CW"\-"\fR.
.PP
.Vb 3
\&  prefix=%date:date\-rfc3164% %host:word%\ex20
\&  # ...
\&  rule=:dhcpd: %\-:number% bad udp checksums in %\-:number% packets
.Ve
.PP
A field named \f(CW"*"\fR is special: it means that the field is a \s-1JSON\s0 hash, and
the resulting message should be populated with its content (fields defined in
the parsing rule have the precedence).
.PP
\&\fB\s-1NOTE\s0\fR: This behaviour has nothing to do with \fIliblognorm\fR, it's specific to
\&\fIlogdevourer\fR.
.PP
.Vb 5
\&  prefix=%date:date\-rfc3164% %host:word%\ex20
\&  # ...
\&  rule=:harpd[%pid:number%]: %*:json%
\&  # or alternatively:
\&  rule=:harpd[%pid:number%]: %*:rest%
.Ve
.PP
These two rules have a subtle difference. The first rule causes \s-1JSON\s0 to be
deserialized by \fIliblognorm\fR (\s-1JSON\s0 field type is supported since 1.1.2),
while in the second one it's \fIlogdevourer\fR's job. The latter of course works
with \fIliblognorm\fR 1.1.1.
.PP
If many rules share a common prefix, like syslog messages, it's useful to
define it in advance. Prefix applies to the rules that follow it, until it is
changed. Default value is empty string (\f(CW""\fR).
.PP
The format is similar as for \f(CW\*(C`rule=...\*(C'\fR lines, except for the tags part.
.PP
.Vb 2
\&  # traditional syslog format
\&  prefix=%date:date\-rfc3164% %host:word%\ex20
.Ve
.PP
Note the trailing space (encoded for visibility as \f(CW"\ex20"\fR). It needs to go
either to the prefix or to each of the rules.
.PP
Messages that are results of parsing can be annotated. Such annotations only
apply to the messages with specific tag, and can add static text to the
message. A tag can have multiple annotations.
.PP
.Vb 2
\&  annotate=dhcp_discover:+program="dhcpd"
\&  annotate=dhcp_discover:+event="DISCOVER"
.Ve
.SS "Field Types"
.IX Subsection "Field Types"
.ie n .IP """%field:number%""" 4
.el .IP "\f(CW%field:number%\fR" 4
.IX Item "%field:number%"
decimal number (a sequence of digits), returned as the original string
.ie n .IP """%field:float%""" 4
.el .IP "\f(CW%field:float%\fR" 4
.IX Item "%field:float%"
floating point number, returned as the original string
.ie n .IP """%field:whitespace%"" (new in \fIliblognorm\fR 1.1.2)" 4
.el .IP "\f(CW%field:whitespace%\fR (new in \fIliblognorm\fR 1.1.2)" 4
.IX Item "%field:whitespace% (new in liblognorm 1.1.2)"
one or more whitespace characters
.ie n .IP """%field:word%""" 4
.el .IP "\f(CW%field:word%\fR" 4
.IX Item "%field:word%"
one or more non-whitespace characters, until the next whitespace or end of
line
.ie n .IP """%field:string\-to:SEPARATOR%""" 4
.el .IP "\f(CW%field:string\-to:SEPARATOR%\fR" 4
.IX Item "%field:string-to:SEPARATOR%"
one or more characters, up to \f(CW\*(C`SEPARATOR\*(C'\fR string
.ie n .IP """%field:alpha%""" 4
.el .IP "\f(CW%field:alpha%\fR" 4
.IX Item "%field:alpha%"
one or more characters from \f(CW\*(C`/[a\-zA\-Z]/\*(C'\fR set
.ie n .IP """%field:char\-to:C%""" 4
.el .IP "\f(CW%field:char\-to:C%\fR" 4
.IX Item "%field:char-to:C%"
one or more characters, up to \f(CW\*(C`C\*(C'\fR character
.ie n .IP """%field:rest%""" 4
.el .IP "\f(CW%field:rest%\fR" 4
.IX Item "%field:rest%"
any remaining string
.ie n .IP """%field:date\-rfc3164%""" 4
.el .IP "\f(CW%field:date\-rfc3164%\fR" 4
.IX Item "%field:date-rfc3164%"
date in \f(CW\*(C`%b %e %H:%M:%S\*(C'\fR format (with slightly different formats allowed)
.ie n .IP """%field:date\-rfc5424%""" 4
.el .IP "\f(CW%field:date\-rfc5424%\fR" 4
.IX Item "%field:date-rfc5424%"
date in \f(CW\*(C`%Y\-%m\-%dT%H:%M:%S.%2N%:z\*(C'\fR format (with slightly different
formats allowed)
.ie n .IP """%field:ipv4%""" 4
.el .IP "\f(CW%field:ipv4%\fR" 4
.IX Item "%field:ipv4%"
IPv4 address, in dot-decimal notation (e.g. \f(CW127.0.0.1\fR)
.ie n .IP """%field:ipv6%"" (new in \fIliblognorm\fR 1.1.2)" 4
.el .IP "\f(CW%field:ipv6%\fR (new in \fIliblognorm\fR 1.1.2)" 4
.IX Item "%field:ipv6% (new in liblognorm 1.1.2)"
IPv6 address, in \s-1RFC\s0 4291 format, followed either by end of string or
a whitespace
.ie n .IP """%field:mac48%"" (new in \fIliblognorm\fR 1.1.2)" 4
.el .IP "\f(CW%field:mac48%\fR (new in \fIliblognorm\fR 1.1.2)" 4
.IX Item "%field:mac48% (new in liblognorm 1.1.2)"
\&\s-1IEEE\s0 802 \s-1MAC\s0 address, with digit pairs separated by either colons (\f(CW":"\fR) or
hyphens (\f(CW"\-"\fR) (e.g. \f(CW\*(C`00:00:00:00:00:00\*(C'\fR or \f(CW\*(C`FF\-FF\-FF\-FF\-FF\-FF\-FF\*(C'\fR)
.ie n .IP """%field:regex:RE%""" 4
.el .IP "\f(CW%field:regex:RE%\fR" 4
.IX Item "%field:regex:RE%"
Perl-compatible regexp (see \fIpcre\fR\|(3) for syntax); \fB\s-1NOTE\s0\fR: only when
\&\fIliblognorm\fR was compiled with \s-1PCRE\s0 support, which is not the default build
option
.ie n .IP """%field:json%"" (new in \fIliblognorm\fR 1.1.2)" 4
.el .IP "\f(CW%field:json%\fR (new in \fIliblognorm\fR 1.1.2)" 4
.IX Item "%field:json% (new in liblognorm 1.1.2)"
\&\s-1JSON\s0 hash object, including any whitespace that follows it
.SH "SIGNALS"
.IX Header "SIGNALS"
.IP "\fI\s-1SIGTERM\s0\fR, \fI\s-1SIGINT\s0\fR" 4
.IX Item "SIGTERM, SIGINT"
Terminate daemon.
.IP "\fI\s-1SIGHUP\s0\fR" 4
.IX Item "SIGHUP"
Reload configuration, list of sources and destinations, and \fIliblognorm\fR
rules.
.SH "FILES"
.IX Header "FILES"
.IP "\fI/etc/logdevourer/logdevourer.conf\fR \- configuration file" 4
.IX Item "/etc/logdevourer/logdevourer.conf - configuration file"
.PD 0
.IP "\fI/etc/logdevourer/syslog.rules.example\fR \- example of \fIliblognorm\fR rules" 4
.IX Item "/etc/logdevourer/syslog.rules.example - example of liblognorm rules"
.IP "\fI/var/lib/logdevourer/\fR \- state directory" 4
.IX Item "/var/lib/logdevourer/ - state directory"
.IP "\fI/var/run/logdevourer.pid\fR \- pidfile" 4
.IX Item "/var/run/logdevourer.pid - pidfile"
.PD
.SH "TODO"
.IX Header "TODO"
Some backpressure mechanism, for destination daemon to signal network
problems. This would limit necessary message spooling.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
liblognorm home page <http://www.liblognorm.com/> and
documentation <http://www.liblognorm.com/files/manual/configuration.html>
.PP
Seismometer Toolbox <http://seismometer.net/toolbox/> (\fImessenger\fR\|(8))
.PP
Fluentd <http://www.fluentd.org/>
